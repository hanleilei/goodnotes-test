name: PR CI - kind + ingress + loadtest

on:
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write

jobs:
  kind-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # use the official KinD Action
      - name: Setup KinD
        uses: helm/kind-action@v1
        with:
          version: "v0.24.0"
          config: k8s/kind-config.yaml
          cluster_name: kind

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Show cluster info
        run: |
          kubectl get nodes -o wide
          kubectl cluster-info

      - name: Install ingress-nginx
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml

      - name: Wait for ingress-nginx ready
        run: |
          kubectl wait --namespace ingress-nginx   --for=condition=ready pod   --selector=app.kubernetes.io/component=controller   --timeout=300s
          # kubectl -n ingress-nginx wait --for=condition=Ready pod --all --timeout=500s
          # kubectl -n ingress-nginx wait --for=condition=Available deployment/ingress-nginx-controller --timeout=500s      
      
      - name: Patch ingress-nginx service to NodePort
        run: |
          kubectl patch service ingress-nginx-controller -n ingress-nginx -p '{"spec":{"type":"NodePort","ports":[{"name":"http","nodePort":30080,"port":80,"protocol":"TCP","targetPort":"http"},{"name":"https","nodePort":30443,"port":443,"protocol":"TCP","targetPort":"https"}]}}'

      - name: Install Prometheus
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm install monitoring prometheus-community/prometheus \
            --namespace monitoring --create-namespace
          
          export POD_NAME=$(kubectl get pods --namespace monitoring -l "app.kubernetes.io/name=prometheus,app.kubernetes.io/instance=monitoring" -o jsonpath="{.items[0].metadata.name}")
          kubectl --namespace monitoring port-forward $POD_NAME 9090 &

          export POD_NAME=$(kubectl get pods --namespace monitoring -l "app.kubernetes.io/name=alertmanager,app.kubernetes.io/instance=monitoring" -o jsonpath="{.items[0].metadata.name}")
          kubectl --namespace monitoring port-forward $POD_NAME 9093 &

          export POD_NAME=$(kubectl get pods --namespace monitoring -l "app=prometheus-pushgateway,component=pushgateway" -o jsonpath="{.items[0].metadata.name}")
          kubectl --namespace monitoring port-forward $POD_NAME 9091 &  

          echo "⏳ Waiting for Prometheus components..."
          kubectl rollout status deploy/monitoring-prometheus-server -n monitoring --timeout=180s
          kubectl rollout status statefulset/monitoring-prometheus-alertmanager -n monitoring --timeout=180s
          kubectl rollout status deploy/monitoring-prometheus-kube-state-metrics -n monitoring --timeout=180s
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=prometheus-node-exporter -n monitoring --timeout=180s


      - name: Deploy applications
        run: |
          kubectl apply -f k8s/k8s-manifest.yaml

      - name: Wait for deployments
        run: |
          kubectl rollout status deploy/foo-deployment --timeout=120s
          kubectl rollout status deploy/bar-deployment --timeout=120s

          # verify pods are running
          kubectl get pods -l app=foo -o jsonpath='{.items[*].status.phase}' | grep -q Running
          kubectl get pods -l app=bar -o jsonpath='{.items[*].status.phase}' | grep -q Running

      - name: Verify ingress connectivity
        run: |
          set -e
          echo "Testing ingress connectivity..."

          # wait for ingress to be ready
          sleep 10
          
          # test foo service
          echo "Testing foo.localhost:"
          curl -f -H "Host: foo.localhost" http://foo.localhost:8080/ | tee /tmp/foo.txt

          # test bar service
          echo "Testing bar.localhost:"
          curl -f -H "Host: bar.localhost" http://bar.localhost:8080/ | tee /tmp/bar.txt
          
          echo "--- Response from foo ---"
          cat /tmp/foo.txt
          echo "--- Response from bar ---"
          cat /tmp/bar.txt

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Port-forward Prometheus
        run: |
          nohup kubectl port-forward svc/monitoring-prometheus-server 9090:80 -n monitoring &
          sleep 5

      - name: Run load test and generate report
        id: loadtest
        continue-on-error: true  # if load test fails, we still want to proceed to report generation
        run: |
          echo "Running load test..."
          python3 scripts/loadtest.py --requests 500 --concurrency 50 --hosts foo.localhost bar.localhost &
          
          # check if the load test script generated a report
          if [ ! -f loadtest-report.md ]; then
            echo "⚠️ Load test failed to generate report" > loadtest-report.md
            echo "Check the logs above for details." >> loadtest-report.md
            exit 1
          fi

          query_prometheus() {
              local query="$1"
              local start="$2"
              local end="$3"
              curl -s "http://localhost:9090/api/v1/query_range" \
                  --data-urlencode "query=$query" \
                  --data-urlencode "start=$start" \
                  --data-urlencode "end=$end" \
                  --data-urlencode "step=15s" | jq -r '.data.result'
          }
          
          # Collect resource utilization metrics
          echo "=== RESOURCE UTILIZATION METRICS ===" > monitoring_report.txt
          echo "" >> monitoring_report.txt
          
          # CPU Usage
          echo "CPU Usage (%):" >> monitoring_report.txt
          query_prometheus 'rate(container_cpu_usage_seconds_total{pod=~"foo-deployment.*|bar-deployment.*"}[5m]) * 100' $START_TIME $END_TIME | \
              jq -r '.[] | select(.values | length > 0) | "Pod: " + .metric.pod + " - Avg CPU: " + ((.values | map(.[1] | tonumber) | add / length) | tostring)' >> monitoring_report.txt
          
          # Memory Usage
          echo "" >> monitoring_report.txt
          echo "Memory Usage (MB):" >> monitoring_report.txt
          query_prometheus 'container_memory_usage_bytes{pod=~"foo-deployment.*|bar-deployment.*"} / 1024 / 1024' $START_TIME $END_TIME | \
              jq -r '.[] | select(.values | length > 0) | "Pod: " + .metric.pod + " - Avg Memory: " + ((.values | map(.[1] | tonumber) | add / length) | tostring)' >> monitoring_report.txt
          
          # Network I/O
          echo "" >> monitoring_report.txt
          echo "Network I/O:" >> monitoring_report.txt
          query_prometheus 'rate(container_network_receive_bytes_total{pod=~"foo-deployment.*|bar-deployment.*"}[5m])' $START_TIME $END_TIME | \
              jq -r '.[] | select(.values | length > 0) | "Pod: " + .metric.pod + " - Avg RX: " + ((.values | map(.[1] | tonumber) | add / length) | tostring) + " bytes/s"' >> monitoring_report.txt
          
          # HTTP request metrics from nginx-ingress
          echo "" >> monitoring_report.txt
          echo "Ingress Metrics:" >> monitoring_report.txt
          query_prometheus 'rate(nginx_ingress_controller_requests[5m])' $START_TIME $END_TIME | \
              jq -r '.[] | select(.values | length > 0) | "Host: " + .metric.host + " - Avg RPS: " + ((.values | map(.[1] | tonumber) | add / length) | tostring)' >> monitoring_report.txt
          
          # Kill prometheus port-forward
          kill $PROMETHEUS_PID

      - name: Add test summary to report
        if: always()
        run: |
          echo "## Test Environment" >> loadtest-report.md
          echo "- Runner: ubuntu-latest" >> loadtest-report.md
          echo "- KinD version: v0.24.0" >> loadtest-report.md
          echo "- Kubernetes version: $(kubectl version --client=true)" >> loadtest-report.md
          echo "- Test status: ${{ steps.loadtest.outcome }}" >> loadtest-report.md
          echo "- Timestamp: $(date -u)" >> loadtest-report.md

      - name: Comment PR with load test results
        env:
          GH_TOKEN: ${{ github.token }} # GitHub token to authenticate API requests
        run: |
          cd "$GITHUB_WORKSPACE"
          bash scripts/comment-pr.sh ${{ github.event.pull_request.number }}

      - name: Cleanup
        if: always()
        run: |
          # cleanup port-forward processes
          pkill -f "kubectl port-forward" || true

          # show final cluster state (for debugging)
          echo "Final cluster state:"
          kubectl get all --all-namespaces || true
